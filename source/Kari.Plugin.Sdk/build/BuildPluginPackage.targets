<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- 
    Enable plugin-packing automatically only for non-multitargeting projects
    (that haven't specifically set the property).
   -->
  <PropertyGroup Condition=" '$(PackAsKariPlugin)' == '' AND '$(TargetFrameworks)' == '' ">
    <PackAsKariPlugin>true</PackAsKariPlugin>
  </PropertyGroup>

  <!-- Hook plugin-packing targets -->
  <PropertyGroup >
    <!--
        The following is a documented extension point that causes CreatePluginPackageBuildProps
        to be always executed in a specific TargetFramework context, whether multitargeting or not.
        Warning about multitargeting is executed after Pack target separately.
        Extension point documentation:
        https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets#targetsfortfmspecificcontentinpackage
    -->
    <TargetsForTfmSpecificContentInPackage>
      $(TargetsForTfmSpecificContentInPackage);
      _SetNoBuildTrueWhenGeneratePackageOnBuild;
      <!-- PackKariPlugin -->
    </TargetsForTfmSpecificContentInPackage>
    <!-- Declare dependencies of PackKariPlugin target -->
    <PackKariPluginDependsOn>
      $(PackKariPluginDependsOn);
    </PackKariPluginDependsOn>
    <!-- Run validation before Pack target -->
    <BeforePack>ValidatePluginPackageBuildProps;$(BeforePack)</BeforePack>
  </PropertyGroup>

  <!--
    This target raises a warning if the project is multi-targeting but doesn't set
    PackAsKariPlugin explicitly. This is to require developers to
    specifically enable plugin-packing for a single framework instead of packaging
    tool for multiple TFMs - such a scenario is not supported by CodeGeneration.Roslyn tooling.

    Reasoning: the plugin system cannot decide which framework's assets to load,
    so we need to provide only one set.

    TODO: validate the contents of the nupkg? (props points at the output assembly)
  -->
  <Target Name="ValidatePluginPackageBuildProps">
    <PropertyGroup>
      <_PackAsCgrPluginRequiresSingleTargetFrameworkMessage>
        <![CDATA[
        PackAsKariPlugin target requires a single TargetFramework to be used for packing the tool. Enable Plugin packing conditionally by adding this to one of PropertyGroup elements: <PackAsKariPlugin>%24(TargetFramework.Equals('net5.0'))</PackAsKariPlugin>
        ]]>
      </_PackAsCgrPluginRequiresSingleTargetFrameworkMessage>
    </PropertyGroup>
    <Warning Condition=" '$(PackAsKariPlugin)' == '' AND '$(TargetFrameworks)' != '' " Text="$(_PackAsCgrPluginRequiresSingleTargetFrameworkMessage.Trim())" />
  </Target>
  
  <!--
    This is required to prevent circular dependency:
    - Build -> GeneratePackageOnBuild -> Pack
    - Pack -> PackKariPlugin depends on Publish
    - Publish depends on Build (**if NoBuild != true**)

    If it's causing trouble, disable this target by setting SkipSetNoBuildTrueWhenGeneratePackageOnBuild=true
  -->
  <Target Name="_SetNoBuildTrueWhenGeneratePackageOnBuild" Condition=" '$(GeneratePackageOnBuild)' == 'true' and '$(SkipSetNoBuildTrueWhenGeneratePackageOnBuild)' != 'true' ">
    <PropertyGroup>
      <NoBuild>true</NoBuild>
    </PropertyGroup>
  </Target>


  <Target Name="RunAnnotator" BeforeTargets="BeforeBuild" Condition=" '$(RunKariAnnotator)' != 'false' ">
    <Exec Command="dotnet tool run kari-annotator -- $(KariAnnotatorArguments)" />
    <ItemGroup>
      <!-- https://stackoverflow.com/a/44829863/9731532 -->
      <Compile Include="**/*$(DefaultLanguageSourceExtension)"
               Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder);$(BaseIntermediateOutputPath)**;$(BaseOutputPath)**;@(Compile)" />
    </ItemGroup>
  </Target>

  <ItemGroup>
    <KariAnnotatorGeneratedFiles Include="**\*.Generated.cs" Condtion=" '$(KariAnnotatorGeneratedFiles)' == '' "/>
  </ItemGroup>

  <Target Name="TextTemplateClean" AfterTargets="Clean">
    <Delete Files="@(KariAnnotatorGeneratedFiles)" />
  </Target>

</Project>