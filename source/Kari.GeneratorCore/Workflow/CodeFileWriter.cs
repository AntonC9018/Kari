using System;
using System.Diagnostics;
using System.IO;
using System.Text;

namespace Kari.GeneratorCore.Workflow
{
    public interface IFileWriter
    {
        IFileWriter GetProjectWriter(string projectDirectory);
        void WriteCodeFile(string filename, string text);
    }

    public static class FileWriterData
    {
        public static readonly Encoding NoBomUtf8 = new UTF8Encoding(encoderShouldEmitUTF8Identifier: false);

        public const string Header = @"
// <auto-generated>
// This file has been autogenerated by Kari.
// </auto-generated>

#pragma warning disable";

        public const string Footer = "#pragma warning restore";
    }

    public class SingleCodeFileWriter : IFileWriter, IDisposable
    {
        public StreamWriter? _file;

        private void OpenFile()
        {
            var path = Path.Combine(MasterEnvironment.Instance.ProjectRootDirectory, MasterEnvironment.Instance.GeneratedDirectorySuffix, ".cs");
            _file = new StreamWriter(path, append: false, FileWriterData.NoBomUtf8);
            _file.Write(FileWriterData.Header);
        }

        public void Dispose()
        {
            if (_file is null) return;
            _file.Write(FileWriterData.Footer);
            _file.Flush();
            _file.Close();
            _file = null;
        }

        public IFileWriter GetProjectWriter(string projectDirectory)
        {
            return this;
        }

        public void WriteCodeFile(string filename, string text)
        {
            if (_file is null) OpenFile();
            _file.WriteLine("// " + filename);
            _file.Write(text);
        }
    }

    public class SeparateCodeFileWriter : IFileWriter
    {
        private readonly string _baseFolder;

        public SeparateCodeFileWriter() : this(MasterEnvironment.Instance.ProjectRootDirectory) {}

        private SeparateCodeFileWriter(string directory)
        {
            _baseFolder = Path.Combine(directory, MasterEnvironment.Instance.GeneratedDirectorySuffix);
            Directory.CreateDirectory(_baseFolder);
        }

        public IFileWriter GetProjectWriter(string projectDirectory)
        {
            return new SeparateCodeFileWriter(projectDirectory);
        }

        public void WriteCodeFile(string filename, string text)
        {
            var path = Path.Combine(_baseFolder, filename);
            Debug.Assert(!File.Exists(path));

            var file = new StreamWriter(path, append: true, FileWriterData.NoBomUtf8);
            file.Write(FileWriterData.Header);
            file.Write(text);
            file.Write(FileWriterData.Footer);
            file.Flush();
            file.Close();
        }
    }
}