<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
    <AssemblyName>Kari.GeneratorCore</AssemblyName>
    
    <!-- I'm pretty sure this drops the GeneratorCore part -->
    <RootNamespace>Kari.GeneratorCore</RootNamespace>

    <!-- <SignAssembly>True</SignAssembly>
    <AssemblyOriginatorKeyFile>..\..\opensource.snk</AssemblyOriginatorKeyFile> -->
  </PropertyGroup>

  <ItemGroup>
    <!-- Contains attributes and any shared constants. These are available for the users as well -->
    <!-- and should be either copied manually or let be generated by Kari. -->
    <ProjectReference Include="..\Kari.Shared\Kari.Shared.csproj" />
  </ItemGroup>

  <ItemGroup>
    <!-- Roslyn references. -->
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" Version="3.10.0" />
    <PackageReference Include="Microsoft.Build" Version="16.5.0" />
    <PackageReference Include="System.CodeDom" Version="4.7.0" />
  </ItemGroup>

  <ItemGroup>

    <!-- The T4 reference. See this awesome sample https://github.com/nogic1008/T4Sample    -->
    <!-- The actual T4 implementation here https://github.com/mono/t4                       -->
    <!-- It is way easier to use than the built-in implementation in provided by MS via VS. -->
    <PackageReference Include="Mono.TextTemplating" Version="2.2.1" />

    <!-- These just define VARIABLES, used below for the transform `target` -->
    <TextTemplate_CodeAnalysis Include="CodeAnalysis\*.tt" />
    <TextTemplate_Generator Include="Generator\*.tt" />
    <Generated Include="**\*.Generated.cs" />

  </ItemGroup>

  <Target Name="TextTemplateTransform" BeforeTargets="BeforeBuild">

    <!-- %(Whatever) does iteration over the given 'Glob', representing an individual element of the sequence. -->
    <!-- The path to the file is %(TextTemplate_Generator.Filename).tt, because I've set the wd to the folder  -->
    <!-- it is contained. The same for %(TextTemplate_CodeAnalysis.Filename).tt.                               -->
    <Exec WorkingDirectory="$(ProjectDir)\Generator" Command="dotnet t4 %(TextTemplate_Generator.Filename).tt -class Kari.GeneratorCore.Generator.%(TextTemplate_Generator.Filename) -out %(TextTemplate_Generator.Filename).Generated.cs" />

    <!-- There is no -class option, because this is a design time template, I think it is called. -->
    <Exec WorkingDirectory="$(ProjectDir)\CodeAnalysis" Command="dotnet t4 %(TextTemplate_CodeAnalysis.Filename).tt -out %(TextTemplate_CodeAnalysis.Filename).Generated.cs" />

  </Target>

  <Target Name="TextTemplateClean" AfterTargets="Clean">
    <Delete Files="@(Generated)" />
  </Target>

</Project>
