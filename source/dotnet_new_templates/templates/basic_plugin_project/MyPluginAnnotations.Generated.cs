namespace Kari.Plugins.MyPlugin
{
    using Kari.GeneratorCore.Workflow;
    using Kari.Utils;
    internal static class DummyMyPluginAnnotations
    {
        internal const string Text = @"// MyPlugin file generated by Kari.
// This file should be included almost as-is in the generated output.
// The text version of this file and the helpers for the attributes defined here are available in the
// MyPluginAnnotations.Generated.cs version of this file.
namespace Kari.Plugins.MyPlugin
{
    // It is important to import things inside the namespace.
    // Obviously, you cannot import Kari specific things or things defined in your other files, 
    // unless you also export the source code from those files.
    using System;
    using System.Diagnostics;

    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]
    [Conditional(""CodeGeneration"")]
    public class MyPluginAttribute : Attribute
    {
    }

    // You may include things besides attributes in this file, 
    // if you want them shared between your and your consumer's project.
    public interface IExample
    {
    }
}
";
    }
    internal static partial class MyPluginSymbols
    {
        internal static AttributeSymbolWrapper<MyPluginAttribute> MyPluginAttribute { get; private set; }

        internal static void Initialize(Logger logger)
        {
            var compilation = MasterEnvironment.Instance.Compilation;
            MyPluginAttribute = new AttributeSymbolWrapper<MyPluginAttribute>(compilation, logger);
        }
    }
}
