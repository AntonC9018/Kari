<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>

<#	// I have no clue if it's even possible to pass parameters to templates in a normal way
	// But this hack works I guess.
	var absolutePath = System.Environment.GetEnvironmentVariable("ANNOTATIONS_FILENAME");
	var classname = Path.GetFileNameWithoutExtension(absolutePath);
	var attributesText = File.ReadAllText(absolutePath, Encoding.UTF8);
	var attributesTextEscaped = attributesText.Replace("\"", "\"\""); 

	// literally the first line has the namespace declaration
	string lambda()
	{
		int nspaceIndex = attributesText.IndexOf("namespace");
		if (nspaceIndex == -1) 
		{
			return "namespace Dummy";
		}

		int bracketIndex = attributesText.IndexOf('{', nspaceIndex + "namespace".Length);
		if (bracketIndex == -1)
		{
			return attributesText;
		}

		var n = attributesText.Substring(nspaceIndex, bracketIndex - nspaceIndex - 1);
		return n.Replace("\r", "").Replace("\n", "");
	}

	string namespaceDeclaration = lambda();
#>
<#= namespaceDeclaration #> 
{
	public static class Dummy<#= classname #>
	{
		public const string Text = @"<#= attributesTextEscaped #>";
	}
}