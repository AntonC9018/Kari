
// <auto-generated>
// This file has been autogenerated by Kari.
// </auto-generated>

#pragma warning disable
namespace Kari.Test
{
    public class HelloCommand : ICommand
    {
        public string HelpMessage => @"Usage: Hello positional optional|-optional=value [-flag=value] [-option=value] 

Some parameter

Argument/Option       Type            Description
---------------------------------------------------
positional            Int32           pos help
optional|-optional    String          optional help
-flag                 Flag, =false    idk1
-option               String          idk2

";        
        public string Execute(CommandContext context)
        {
            if (context.Parser.IsEmpty) return HelpMessage;
            if (ExecuteHelper.IsHelp(context.Parser)) return HelpMessage;
            // Take in all the positional arguments
            string __posInput0 = context.Parser.GetString();
            if (__posInput0 == null)
            {
                throw new System.Exception("Expected a positional argument 'positional'");
            }
            var __posArg0 = int.Parse(__posInput0);
            context.Parser.SkipWhitespace();
            // Take in all the option-like positional arguments
            bool __isPresentOptionLikeArg0 = false;
            System.String __optionLikeArg0 = null;
            {
                string __input;
                __input = context.Parser.GetString();
                if (__input is null)
                {
                    goto __afterOptionLike;
                }
                context.Parser.SkipWhitespace();
                __isPresentOptionLikeArg0 = true;
                __optionLikeArg0 = (__input);
                __afterOptionLike: ;
            }
            System.Boolean __option0 = false;
            System.String __option1 = "44";
            while (context.Parser.TryGetOption(out Option __option))
            {
                context.Parser.SkipWhitespace();
                switch (__option.Name)
                {
                    case "flag":
                    {
                        __option0 = __option.GetFlagValue();
                        break;
                    }
                    case "option":
                    {
                        __option1 = (__option.Value);
                        break;
                    }
                    case "optional":
                    {
                        __optionLikeArg0 = (__option.Value);
                        __isPresentOptionLikeArg0 = true;
                        break;
                    }
                    default: throw new System.Exception($"Unknown option: '{__option.Name}'");
                }
            }
            // Make sure all required parameters have been given
            if (!__isPresentOptionLikeArg0)
            {
                throw new System.Exception("Option-like argument 'optional' not given");
            }
            // Call the function with correct arguments
            return Kari.Test.Hello.SomeCommand(positional : __posArg0, optional : __optionLikeArg0, flag : __option0, option : __option1).ToString();            
        }
        
    }


    public static class Commands
    {
        public static ICommand[] StaticCommands = new ICommand[]
        {
            new HelloCommand(),
            
        };
    }
}

#pragma warning enable

